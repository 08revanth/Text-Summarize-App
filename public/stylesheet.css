/*.cta-section {
    background-color: #f2f2f2;
    padding: 40px;
  }

  .cta-content {
    justify-content: center;
    display: flex;
    flex-wrap: nowrap;
  }

  .cta-text {
    flex-basis: 50%;
    padding-right: 20px;
  }

  .cta-content h2 {
    font-size: 25px;
    color: #333;
    margin-bottom: 10px;
  }

  .cta-content p {
    font-size: 16px;
    color: #666;
    padding-bottom: 10px;
  }

  .cta-button {
    padding: 10px 20px;
    border: 1px solid #A6A6A6;
    width: 300px;
    max-height: 40px;
    color: #333;
    font-weight: bold;
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.3s ease;
  }

  .cta-button:hover {
    border-color: #333333;
  }

  img {
    max-height:200px;
    max-width: auto;
  }
    */

  body {
    font-family: 'Roboto', sans-serif;
    background-color:rgb(23, 23, 23);
    padding: 20px;
    text-align: center
  }

  h1 {
    text-align: center;
    font-weight: bold;
    color: white;
    margin-bottom: 30px;
    font-size: 32px;
  }

  p {
    line-height: 1.5;
    margin-bottom: 20px;
    font-size: 18px;
    color:white;
  }

  .container {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
    margin: 0 auto;
    padding: 20px;
  }

  .text-box {
    width: 400px;
    border-radius: 4px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    padding: 20px;
    background-color: #ffffff
  }

  textarea {
    height: 300px;
    resize: none;
    border: none;
    padding: 10px;
    margin-bottom: 10px;
  }

  .submit-button {
    position: relative;
    background-color: #ef5b25;
    color: #ffffff;
    font-weight: bold;
    border-radius: 4px;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    margin-bottom: -5px;
  }

  .submit-button-text {
    color: #ffffff;
    transition: all 0.2s;
  }

  .submit-button:disabled{
    position: relative;
    background-color: #ef5b25;
    color: #ffffff;
    opacity: 40%;
    font-weight: bold;
    border-radius: 4px;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    margin-bottom: -5px;
  }

  .submit-button--loading .submit-button-text {
    visibility: hidden;
    opacity: 0;
  }

  .submit-button--loading::after {
      content: "";
      position: absolute;
      width: 16px;
      height: 16px;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      margin: auto;
      border: 4px solid transparent;
      border-top-color: #ffffff;
      border-radius: 50%;
      animation: button-loading-spinner 1s ease infinite;
  }

  @media (max-width: 768px) {
    .container {
      flex-direction: column;
    }
  }

  /*
  The @media (max-width: 768px) rule applies styles specifically when 
   the screen width is 768 pixels or smaller. This is typically used to 
   make a website responsive for devices like tablets and smaller screens.

  This modifies the .container's flex-direction to column, making its
  child elements stack vertically instead of being laid out horizontally
  (the default for flex-direction: row).
  */

  @keyframes button-loading-spinner {
      from {
          transform: rotate(0turn);
      }

      to {
          transform: rotate(1turn);
      }
  }

/*
  The @keyframes button-loading-spinner defines a custom animation for 
  a loading spinner effect.
  from: Sets the initial state of the element to no rotation (rotate(0turn)).
to: Specifies a full rotation of the element (rotate(1turn)), completing
one full circle.
The 1turn unit equals a 360-degree rotation.
This animation can be applied to an element (like a button's spinner) 
using the animation property. For example:

This would rotate the spinner continuously in a smooth, infinite loop.

In Summary:
The @media rule ensures responsive layout adjustments on smaller screens.
The @keyframes creates a spinning animation, likely for a loading effect.
*/